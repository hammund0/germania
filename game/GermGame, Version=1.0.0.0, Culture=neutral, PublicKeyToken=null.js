/* Generated by JSIL v0.8.2 build 38733. See http://jsil.org/ for more information. */ 
'use strict';
var $asm00 = JSIL.DeclareAssembly("GermGame, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("GermGame.Program"), "Main", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.String")])));

JSIL.DeclareNamespace("GermGame");
/* class GermGame.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.GermGame.GermGame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm06.System.IDisposable.Dispose)) ();
  };


  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  }; 

  JSIL.MakeStaticClass("GermGame.Program", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      Program_Main
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class GermGame.GermGame */ 

(function GermGame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.GermGame.GermGame_ScreenState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.GermGame.GermGame_State)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm06.System.Convert)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.Microsoft.Xna.Framework.Vector2, [$asm06.System.Single, $asm06.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm06.System.Double, [$asm06.System.String]))) ();
  };


  function GermGame__ctor () {
    this.lives = 3;
    this.score = 0;
    this.finalScore = 0;
    this.timeRunning = true;
    this.level = 1;
    this.screenStartTime = $T00().Zero.MemberwiseClone();
    this.timeAfterDeath = $T00().Zero.MemberwiseClone();
    this.hasDied = false;
    this.hasFinished = false;
    this.facingRight = true;
    this.facingLeft = false;
    this.restart = false;
    this.hasJustStarted = true;
    this.currentScreen = $T01().Start;
    this.currentState = $T02().Standing;
    this.timeWalk = $T00().Zero.MemberwiseClone();
    this.timeWalkTwo = $T00().Zero.MemberwiseClone();
    this.allowJump = true;
    this.jump = 12;
    this.timeFiring = $T00().Zero.MemberwiseClone();
    this.canFire = true;
    this.exitDialog = false;
    $T03().prototype._ctor.call(this);
    this.graphics = new ($T04())(this);
    (this.graphics).set_PreferredBackBufferWidth(1024);
    (this.graphics).set_PreferredBackBufferHeight(768);
    (this.get_Content()).set_RootDirectory("Content");
  }; 

  function GermGame_Background (gameTime) {
    this.backgroundRectangle = new ($T07())(0, 0, this.screenWidth, this.screenHeight);
    if (this.currentScreen === $T01().Start) {
      (this.spriteBatch).DrawRect(this.menuBackground, this.backgroundRectangle, $T09().get_White());
    }
    if (this.currentScreen === $T01().Gameplay) {
      (this.spriteBatch).DrawRect(this.background, this.backgroundRectangle, $T09().get_White());
    }
    this.screenStartTime = $T00().op_Addition(this.screenStartTime, gameTime.get_ElapsedGameTime()).MemberwiseClone();
    if (!((this.currentScreen !== $T01().Gameplay) || 
        !true || !$T00().op_LessThan(this.screenStartTime.MemberwiseClone(), $T00().FromMilliseconds(2000).MemberwiseClone()))) {
      (this.spriteBatch).DrawString(this.textIndicator, JSIL.ConcatString("LEVEL ", $T0B().$Box(this.level)), $S00().Construct(+((((this.screenWidth | 0) / 2) | 0) - 45), +((((this.screenHeight | 0) / 2) | 0) - 100)), $T09().get_Black());
      if ($T00().op_GreaterThan(this.screenStartTime.MemberwiseClone(), $T00().FromMilliseconds(2000).MemberwiseClone())) {
        this.screenStartTime = $T00().Zero.MemberwiseClone();
      }
    }
  }; 

  function GermGame_Collision () {
    if (this.currentScreen === $T01().Gameplay) {
      if ((this.spriteCollision).Intersects(this.platforms[0])) {
        if (+this.spriteMovement.X >= +(this.platforms[0].X)) {
          this.spriteMovement.X = +this.spriteMovement.X - 3;
        }
      }
      if ((this.spriteCollision).Intersects(this.platforms[1])) {
        if (+this.spriteMovement.X >= +(this.platforms[1].X)) {
          this.spriteMovement.X = +this.spriteMovement.X + 3;
        }
      }
      if ((this.spriteCollision).Intersects(this.platforms[2])) {
        if (+this.spriteMovement.Y > +(this.platforms[2].Y)) {
          this.spriteMovement.Y = +((this.platforms[2].Y | 0) - 4);
          this.jump = 13;
        }
      }

      for (var loop = 3; loop <= 4; loop = ((loop + 1) | 0)) {
        if ((this.spriteCollision).Intersects(this.platforms[loop])) {
          if (+this.spriteMovement.Y > +(this.platforms[loop].Y)) {
            this.spriteMovement.Y = +(this.platforms[loop].Y);
            this.jump = 13;
          }
        }
      }
      if (!(!(this.spriteCollision).Intersects(this.platforms[5]) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Down))) {
        if (+this.spriteMovement.Y >= +(this.platforms[5].Y)) {
          this.spriteMovement.Y = +((this.platforms[5].Y | 0) - 4);
          this.jump = 13;
        }
      }
      if (!(!(this.spriteCollision).Intersects(this.platforms[6]) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Down))) {
        if (+this.spriteMovement.Y >= +(this.platforms[6].Y)) {
          this.spriteMovement.Y = +((this.platforms[6].Y | 0) - 2);
          this.jump = 13;
        }
      }

      for (loop = 7; loop <= 14; loop = ((loop + 1) | 0)) {
        if ((this.spriteCollision).Intersects(this.platforms[loop])) {
          if (!((+this.spriteMovement.Y < +(this.platforms[loop].Y)) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Down))) {
            this.spriteMovement.Y = +(this.platforms[loop].Y);
            this.jump = 13;
          }
        }
      }
      if (!(!(this.spriteCollision).Intersects(this.finishDoor) || !$T0E().GetState().MemberwiseClone().IsKeyDown($T0F().Enter))) {
        this.hasFinished = true;
      }
    }
  }; 

  function GermGame_Draw (gameTime) {
    (this.spriteBatch).Begin();
    this.Background(gameTime);
    this.Menu();
    this.Player(gameTime);
    this.Enemies();
    this.TimeScoreAndLives(gameTime);
    (this.spriteBatch).End();
    $T03().prototype.Draw.call(this, gameTime);
  }; 

  function GermGame_Enemies () {
    var $hoisted00 = new ($T0C())(), $hoisted01 = new ($T0C())(), $hoisted02 = new ($T0C())();
    if (this.currentScreen === $T01().Gameplay) {

      for (var loop = 0; loop <= 3; loop = ((loop + 1) | 0)) {
        if (this.boolPink[loop]) {
          (this.spriteBatch).DrawScaleF(
            this.enemyPinkOne, 
            this.enemyPinkMovement[loop], 
            null, 
            $T09().get_White(), 
            0, 
            ($hoisted00._ctor(0, 0), 
              $hoisted00), 
            1, 
            this.spriteFXPink[loop], 
            0
          );
          this.enemyPinkRec[loop] = new ($T07())(((this.enemyPinkMovement[loop].X) | 0), ((this.enemyPinkMovement[loop].Y) | 0), (this.enemyPinkOne).get_Width(), (this.enemyPinkOne).get_Height());
        }
        if (!(!(this.spriteCollision).Intersects(this.enemyPinkRec[loop]) || !this.boolPink[loop])) {
          if (!(this.hasDied || ((this.lives | 0) <= 0))) {
            this.lives = (((this.lives | 0) - 1) | 0);
            this.hasDied = true;
          }
        }
        if (!(!(this.spriteRectangle).Intersects(this.enemyPinkRec[loop]) || 
            !this.boolPink[loop] || 
            !$T0E().GetState().MemberwiseClone().IsKeyDown($T0F().Space) || 
            this.hasDied || !this.canFire)) {
          this.boolPink[loop] = false;
          this.score = (((this.score | 0) + 100) | 0);
        }
      }

      for (loop = 0; loop <= 2; loop = ((loop + 1) | 0)) {
        if (this.boolPurple[loop]) {
          (this.spriteBatch).DrawScaleF(
            this.enemyPurpleOne, 
            this.enemyPurpleMovement[loop], 
            null, 
            $T09().get_White(), 
            0, 
            ($hoisted01._ctor(0, 0), 
              $hoisted01), 
            1, 
            this.spriteFXPurple[loop], 
            0
          );
          this.enemyPurpleRec[loop] = new ($T07())(((this.enemyPurpleMovement[loop].X) | 0), ((this.enemyPurpleMovement[loop].Y) | 0), (this.enemyPurpleOne).get_Width(), (this.enemyPurpleOne).get_Height());
        }
        if (this.boolGreen[loop]) {
          (this.spriteBatch).DrawScaleF(
            this.enemyGreenOne, 
            this.enemyGreenMovement[loop], 
            null, 
            $T09().get_White(), 
            0, 
            ($hoisted02._ctor(0, 0), 
              $hoisted02), 
            1, 
            this.spriteFXGreen[loop], 
            0
          );
          this.enemyGreenRec[loop] = new ($T07())(((this.enemyGreenMovement[loop].X) | 0), ((this.enemyGreenMovement[loop].Y) | 0), (this.enemyGreenOne).get_Width(), (this.enemyGreenOne).get_Height());
        }
        if (!(!((this.spriteCollision).Intersects(this.enemyPurpleRec[loop]) && 
              this.boolPurple[loop]) && (!(this.spriteCollision).Intersects(this.enemyGreenRec[loop]) || 
              !this.boolGreen[loop]))) {
          if (!(this.hasDied || ((this.lives | 0) <= 0))) {
            this.lives = (((this.lives | 0) - 1) | 0);
            this.hasDied = true;
          }
        }
        if (!(!(this.spriteRectangle).Intersects(this.enemyPurpleRec[loop]) || 
            !this.boolPurple[loop] || 
            !$T0E().GetState().MemberwiseClone().IsKeyDown($T0F().Space) || 
            this.hasDied || !this.canFire)) {
          this.boolPurple[loop] = false;
          this.score = (((this.score | 0) + 100) | 0);
        }
        if (!(!(this.spriteRectangle).Intersects(this.enemyGreenRec[loop]) || 
            !this.boolGreen[loop] || 
            !$T0E().GetState().MemberwiseClone().IsKeyDown($T0F().Space) || 
            this.hasDied || !this.canFire)) {
          this.boolGreen[loop] = false;
          this.score = (((this.score | 0) + 100) | 0);
        }
      }
    }
  }; 

  function GermGame_Initialize () {
    this.platforms = JSIL.Array.New($T07(), 15);
    this.textIndicatorString = JSIL.Array.New($T0A(), 3);
    this.textIndicatorVec = JSIL.Array.New($T0C(), 3);
    this.textIndicatorVec[0] = $S00().Construct(8, 8);
    this.textIndicatorVec[1] = $S00().Construct(668, 8);
    this.textIndicatorVec[2] = $S00().Construct(850, 8);
    this.boolPink = JSIL.Array.New($T11(), 4);
    this.boolPurple = JSIL.Array.New($T11(), 3);
    this.boolGreen = JSIL.Array.New($T11(), 3);
    this.enemyPinkMovement = JSIL.Array.New($T0C(), 4);
    this.enemyPurpleMovement = JSIL.Array.New($T0C(), 3);
    this.enemyGreenMovement = JSIL.Array.New($T0C(), 3);
    this.enemyPinkRec = JSIL.Array.New($T07(), 4);
    this.enemyPurpleRec = JSIL.Array.New($T07(), 3);
    this.enemyGreenRec = JSIL.Array.New($T07(), 3);
    this.spriteFXPink = JSIL.Array.New($T12(), 4);
    this.spriteFXPurple = JSIL.Array.New($T12(), 3);
    this.spriteFXGreen = JSIL.Array.New($T12(), 3);
    this.enemyPinkMovement[0] = $S00().Construct(40, 476);
    this.enemyPinkMovement[1] = $S00().Construct(636, 476);
    this.enemyPinkMovement[2] = $S00().Construct(205, 188);
    this.enemyPinkMovement[3] = $S00().Construct(352, 134);
    this.enemyPurpleMovement[0] = $S00().Construct(224, 391);
    this.enemyPurpleMovement[1] = $S00().Construct(118, 94);
    this.enemyPurpleMovement[2] = $S00().Construct(780, 178);
    this.enemyGreenMovement[0] = $S00().Construct(446, 333);
    this.enemyGreenMovement[1] = $S00().Construct(24, 211);
    this.enemyGreenMovement[2] = $S00().Construct(684, 138);
    this.enemyStartPos = JSIL.Array.New($T11(), 10);

    for (var loop = 0; loop < 10; loop = ((loop + 1) | 0)) {
      this.enemyStartPos[loop] = true;
    }
    this.platforms[0] = new ($T07())(434, 399, 95, 141);
    this.platforms[1] = new ($T07())(529, 399, 73, 141);
    this.platforms[2] = new ($T07())(467, 337, 112, 7);
    this.platforms[3] = new ($T07())(0, 480, 474, 13);
    this.platforms[4] = new ($T07())(602, 480, 432, 13);
    this.platforms[5] = new ($T07())(185, 426, 25, 1);
    this.platforms[6] = new ($T07())(256, 392, 145, 7);
    this.platforms[7] = new ($T07())(640, 275, 32, 7);
    this.platforms[8] = new ($T07())(717, 237, 143, 13);
    this.platforms[9] = new ($T07())(810, 177, 204, 12);
    this.platforms[10] = new ($T07())(355, 138, 396, 12);
    this.platforms[11] = new ($T07())(142, 93, 204, 12);
    this.platforms[12] = new ($T07())(211, 192, 122, 12);
    this.platforms[13] = new ($T07())(141, 237, 45, 6);
    this.platforms[14] = new ($T07())(58, 211, 45, 6);
    this.finishDoor = new ($T07())(155, 94, 38, 12);
    this.popupRec = new ($T07())(311, 216, 420, 226);
    this.popupText = JSIL.Array.New($T0C(), 6);
    this.popupText[0] = $S00().Construct(326, 226);
    this.popupText[1] = $S00().Construct(345, 285);
    this.popupText[2] = $S00().Construct(345, 321);
    this.popupText[3] = $S00().Construct(345, 357);
    this.popupText[4] = $S00().Construct(345, 393);
    this.popupText[5] = $S00().Construct(382, 420);
    this.popupString = JSIL.Array.New($T0A(), 6);
    this.menuButtonText = JSIL.Array.New($T0A(), 4);
    this.menuButtonVectors = JSIL.Array.New($T0C(), 4);
    this.menuButtons = JSIL.Array.New($T07(), 4);
    this.menuButtonVectors[0] = $S00().Construct(430, 200);
    this.menuButtonVectors[1] = $S00().Construct(342, 325);
    this.menuButtonVectors[2] = $S00().Construct(356, 453);
    this.menuButtonVectors[3] = $S00().Construct(455, 573);
    this.menuButtons[0] = new ($T07())(332, 177, 343, 93);
    this.menuButtons[1] = new ($T07())(332, 303, 343, 93);
    this.menuButtons[2] = new ($T07())(332, 430, 343, 93);
    this.menuButtons[3] = new ($T07())(332, 550, 343, 93);
    this.scoreboard = JSIL.Array.New($T13(), 10);
    this.scoreboardPosition = JSIL.Array.New($T0C(), 10);
    this.scoreboardRank = JSIL.Array.New($T0B(), 10);

    for (loop = 0; loop < 9; loop = ((loop + 1) | 0)) {
      this.scoreboard[loop] = 0;
    }

    for (loop = 0; loop <= 3; loop = ((loop + 1) | 0)) {
      this.boolPink[loop] = true;
    }

    for (loop = 0; loop <= 2; loop = ((loop + 1) | 0)) {
      this.boolPurple[loop] = true;
      this.boolGreen[loop] = true;
    }
    $T03().prototype.Initialize.call(this);
  }; 

  function GermGame_Level () {
    var maxX = ((((this.graphics).get_GraphicsDevice()).get_Viewport()).get_Width() | 0);
    if (+this.spriteMovement.X >= +maxX) {
      this.spriteMovement.X = 10;
    }
    if (+this.spriteMovement.X <= +-20) {
      this.spriteMovement.X = 1000;
    }
  }; 

  function GermGame_LoadContent () {
    this.spriteBatch = new ($T08())(this.get_GraphicsDevice());
    this.menuBackground = (this.get_Content()).Load$b1($T10())("images/menubg");
    this.background = (this.get_Content()).Load$b1($T10())("images/bg");
    this.highScoreBackground = (this.get_Content()).Load$b1($T10())("images/highscorebg");
    this.instructionsBackground = (this.get_Content()).Load$b1($T10())("images/instructionsbg");
    this.screenWidth = ((((this.graphics).get_GraphicsDevice()).get_Viewport()).get_Width() | 0);
    this.screenHeight = ((((this.graphics).get_GraphicsDevice()).get_Viewport()).get_Height() | 0);
    this.spriteSheet = (this.get_Content()).Load$b1($T10())("images/spritesheet");
    this.spriteSelection = new ($T07())(0, 0, 50, 60);
    this.enemyPinkOne = (this.get_Content()).Load$b1($T10())("images/enemy1");
    this.enemyPurpleOne = (this.get_Content()).Load$b1($T10())("images/enemy2");
    this.enemyGreenOne = (this.get_Content()).Load$b1($T10())("images/enemy3");
    this.popup = (this.get_Content()).Load$b1($T10())("images/popup");
    this.textIndicator = (this.get_Content()).Load$b1($T16())("font/font");
    this.popupTitle = (this.get_Content()).Load$b1($T16())("font/popUpFont");
    this.smallFont = (this.get_Content()).Load$b1($T16())("font/smallFont");
    this.menuTitle = (this.get_Content()).Load$b1($T16())("font/menuTitle");
    this.menuButton = (this.get_Content()).Load$b1($T16())("font/menuButton");
    this.instructionsFont = (this.get_Content()).Load$b1($T16())("font/instructionsFont");
    this.instructionsFontTitle = (this.get_Content()).Load$b1($T16())("font/instructionsFontTitle");
    this.keyFont = (this.get_Content()).Load$b1($T16())("font/keyFont");
  }; 

  function GermGame_Menu () {
    var backRectangle = new ($T07())();
    this.mouseRectangle = new ($T07())($T18().GetState().get_X(), $T18().GetState().get_Y(), 1, 1);
    if (this.currentScreen === $T01().Start) {
      this.menuButtonText[0] = "START";
      this.menuButtonText[1] = "INSTRUCTIONS";
      this.menuButtonText[2] = "HIGH SCORES";
      this.menuButtonText[3] = "EXIT";
      this.set_IsMouseVisible(true);
      (this.spriteBatch).DrawString(this.keyFont, "Made by Laurence Hammond - Unit 12", $S00().Construct(752, 745), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuTitle, "Germania", $S00().Construct(372, 38), $T09().get_Black());

      for (var loop = 0; loop < 4; loop = ((loop + 1) | 0)) {
        (this.spriteBatch).DrawString(this.menuButton, this.menuButtonText[loop], this.menuButtonVectors[loop], $T09().get_Black());
      }
      if (!(!(this.mouseRectangle).Intersects(this.menuButtons[0]) || this.exitDialog)) {
        if (!(($T18().GetState().get_LeftButton() !== $T19().Pressed) || 
            (($T18().GetState().get_RightButton().valueOf() | 0) !== 0) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Space))) {
          this.hasFinished = false;
          this.time = $T00().Zero.MemberwiseClone();
          this.timeRunning = true;
          this.hasDied = true;
          this.lives = 3;
          this.score = 0;

          for (loop = 0; loop <= 3; loop = ((loop + 1) | 0)) {
            this.boolPink[loop] = true;
          }

          for (loop = 0; loop <= 2; loop = ((loop + 1) | 0)) {
            this.boolPurple[loop] = true;
            this.boolGreen[loop] = true;
          }
          this.currentScreen = $T01().Gameplay;
        }
      }
      if (!(!(this.mouseRectangle).Intersects(this.menuButtons[1]) || this.exitDialog)) {
        if (!(($T18().GetState().get_LeftButton() !== $T19().Pressed) || 
            (($T18().GetState().get_RightButton().valueOf() | 0) !== 0) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Space))) {
          this.currentScreen = $T01().Instructions;
        }
      }
      if (!(!(this.mouseRectangle).Intersects(this.menuButtons[2]) || this.exitDialog)) {
        if (!(($T18().GetState().get_LeftButton() !== $T19().Pressed) || 
            (($T18().GetState().get_RightButton().valueOf() | 0) !== 0) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Space))) {
          this.currentScreen = $T01().HighScores;
        }
      }
      if (!(!(this.mouseRectangle).Intersects(this.menuButtons[3]) || this.exitDialog)) {
        if (!(($T18().GetState().get_LeftButton() !== $T19().Pressed) || 
            (($T18().GetState().get_RightButton().valueOf() | 0) !== 0) || !$T0E().GetState().MemberwiseClone().IsKeyUp($T0F().Space))) {
          this.exitDialog = true;
        }
      }
      if (this.exitDialog) {
        (this.spriteBatch).DrawRect(this.popup, this.popupRec, $T09().get_White());
        (this.spriteBatch).DrawString(this.instructionsFontTitle, "Are you sure you want to exit?", $S00().Construct(345, 246), $T09().get_Black());
        (this.spriteBatch).DrawString(this.instructionsFontTitle, "YES                            NO", $S00().Construct(380, 395), $T09().get_Black());
        this.yesRec = new ($T07())(373, 395, 70, 45);
        this.noRec = new ($T07())(610, 395, 70, 45);
        if ((this.mouseRectangle).Intersects(this.yesRec)) {
          if ($T18().GetState().get_LeftButton() === $T19().Pressed) {
            this.Exit();
          }
        }
        if ((this.mouseRectangle).Intersects(this.noRec)) {
          if ($T18().GetState().get_LeftButton() === $T19().Pressed) {
            this.exitDialog = false;
          }
        }
      }
    }
    if (this.currentScreen === $T01().HighScores) {
      (backRectangle = backRectangle.MemberwiseClone(), 
        $T07().prototype._ctor.call(backRectangle, 12, 36, 154, 61));
      (this.spriteBatch).DrawRect(this.highScoreBackground, this.backgroundRectangle, $T09().get_White());
      (this.spriteBatch).DrawString(this.keyFont, "Made by Laurence Hammond - Unit 12", $S00().Construct(752, 745), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuTitle, "High Scores", $S00().Construct(372, 60), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuButton, "RANK", $S00().Construct(237, 152), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuButton, "NAME", $S00().Construct(376, 152), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuButton, "SCORE", $S00().Construct(625, 152), $T09().get_Black());
      this.scoreboardPosition[0] = $S00().Construct(341, 215);
      this.scoreboardPosition[1] = $S00().Construct(341, 266);
      this.scoreboardPosition[2] = $S00().Construct(341, 315);
      this.scoreboardPosition[3] = $S00().Construct(341, 366);
      this.scoreboardPosition[4] = $S00().Construct(341, 415);
      this.scoreboardPosition[5] = $S00().Construct(341, 466);
      this.scoreboardPosition[6] = $S00().Construct(341, 515);
      this.scoreboardPosition[7] = $S00().Construct(341, 566);
      this.scoreboardPosition[8] = $S00().Construct(341, 615);
      this.scoreboardPosition[9] = $S00().Construct(318, 666);
      this.scoreboardRank[0] = 1;
      this.scoreboardRank[1] = 2;
      this.scoreboardRank[2] = 3;
      this.scoreboardRank[3] = 4;
      this.scoreboardRank[4] = 5;
      this.scoreboardRank[5] = 6;
      this.scoreboardRank[6] = 7;
      this.scoreboardRank[7] = 8;
      this.scoreboardRank[8] = 9;
      this.scoreboardRank[9] = 10;
      if (+this.finalScore > +this.scoreboard[0]) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.scoreboard[5];
        this.scoreboard[5] = +this.scoreboard[4];
        this.scoreboard[4] = +this.scoreboard[3];
        this.scoreboard[3] = +this.scoreboard[2];
        this.scoreboard[2] = +this.scoreboard[1];
        this.scoreboard[1] = +this.scoreboard[0];
        this.scoreboard[0] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[0]) || (+this.finalScore <= +this.scoreboard[1]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.scoreboard[5];
        this.scoreboard[5] = +this.scoreboard[4];
        this.scoreboard[4] = +this.scoreboard[3];
        this.scoreboard[3] = +this.scoreboard[2];
        this.scoreboard[2] = +this.scoreboard[1];
        this.scoreboard[1] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[1]) || (+this.finalScore <= +this.scoreboard[2]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.scoreboard[5];
        this.scoreboard[5] = +this.scoreboard[4];
        this.scoreboard[4] = +this.scoreboard[3];
        this.scoreboard[3] = +this.scoreboard[2];
        this.scoreboard[2] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[2]) || (+this.finalScore <= +this.scoreboard[3]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.scoreboard[5];
        this.scoreboard[5] = +this.scoreboard[4];
        this.scoreboard[4] = +this.scoreboard[3];
        this.scoreboard[3] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[3]) || (+this.finalScore <= +this.scoreboard[4]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.scoreboard[5];
        this.scoreboard[5] = +this.scoreboard[4];
        this.scoreboard[4] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[4]) || (+this.finalScore <= +this.scoreboard[5]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.scoreboard[5];
        this.scoreboard[5] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[5]) || (+this.finalScore <= +this.scoreboard[6]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.scoreboard[6];
        this.scoreboard[6] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[6]) || (+this.finalScore <= +this.scoreboard[7]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.scoreboard[7];
        this.scoreboard[7] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[7]) || (+this.finalScore <= +this.scoreboard[8]))) {
        this.scoreboard[9] = +this.scoreboard[8];
        this.scoreboard[8] = +this.finalScore;
      }
      if (!((+this.finalScore >= +this.scoreboard[8]) || (+this.finalScore <= +this.scoreboard[9]))) {
        this.scoreboard[9] = +this.finalScore;
      }

      for (loop = 0; loop < 10; loop = ((loop + 1) | 0)) {
        (this.spriteBatch).DrawString(this.menuButton, JSIL.ConcatString($T0B().$Box(this.scoreboardRank[loop]), "   PLAYER 1    ", $T13().__Type__.__PublicInterface__.$ToString(this.scoreboard[loop], "0", null)), this.scoreboardPosition[loop], $T09().get_Black());
      }
      (this.spriteBatch).DrawString(this.menuButton, "<Back", $S00().Construct(25, 43), $T09().get_Black());
      if ((this.mouseRectangle).Intersects(backRectangle)) {
        if ($T18().GetState().get_LeftButton() === $T19().Pressed) {
          this.currentScreen = $T01().Start;
        }
      }
    }
    if (this.currentScreen === $T01().Instructions) {
      (backRectangle = backRectangle.MemberwiseClone(), 
        $T07().prototype._ctor.call(backRectangle, 12, 36, 154, 61));
      (this.spriteBatch).DrawRect(this.instructionsBackground, this.backgroundRectangle, $T09().get_White());
      (this.spriteBatch).DrawString(this.keyFont, "Made by Laurence Hammond - Unit 12", $S00().Construct(752, 745), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuButton, "<Back", $S00().Construct(25, 43), $T09().get_Black());
      (this.spriteBatch).DrawString(this.menuTitle, "Instructions", $S00().Construct(372, 60), $T09().get_Black());
      (this.spriteBatch).DrawString(this.instructionsFontTitle, "How to Play", $S00().Construct(136, 160), $T09().get_Black());
      (this.spriteBatch).DrawString(this.instructionsFontTitle, "Scoring", $S00().Construct(136, 291), $T09().get_Black());
      (this.spriteBatch).DrawString(this.instructionsFontTitle, "Controls", $S00().Construct(136, 447), $T09().get_Black());
      (this.spriteBatch).DrawString(this.instructionsFont, "The objective of the game is to destroy the germs using your players\nbleach and clean the area you are in. If a germ touches you, you will\nlose a life. Then to finish the level you find the door and press enter.", $S00().Construct(136, 190), $T09().get_Black());
      (this.spriteBatch).DrawString(this.instructionsFont, "You are rewarded at the end of the level with a score. Your score is\ncalculated by the amount of enemies you killed multiplied by the lives\nyou have left divided by the time.\nFinal Score= Enemies killed x Lives / Time", $S00().Construct(136, 320), $T09().get_Black());
      (this.spriteBatch).DrawString(this.instructionsFont, "To control the player left and right you use the left and right arrow\nkeys.To make the player jump you press the up key. To fire the\nbleach you press the spacebar. To finish the level you press enter on\na door. ", $S00().Construct(136, 472), $T09().get_Black());
      (this.spriteBatch).DrawString(this.keyFont, "FIRE", $S00().Construct(257, 687), $T09().get_Black());
      (this.spriteBatch).DrawString(this.keyFont, "FINISH\nWHEN\nOVER\nDOOR", $S00().Construct(540, 642), $T09().get_Black());
      (this.spriteBatch).DrawString(this.keyFont, "JUMP", $S00().Construct(781, 612), $T09().get_Black());
      (this.spriteBatch).DrawString(this.keyFont, "LEFT", $S00().Construct(709, 687), $T09().get_Black());
      (this.spriteBatch).DrawString(this.keyFont, "RIGHT", $S00().Construct(862, 687), $T09().get_Black());
      if ((this.mouseRectangle).Intersects(backRectangle)) {
        if ($T18().GetState().get_LeftButton() === $T19().Pressed) {
          this.currentScreen = $T01().Start;
        }
      }
    }
  }; 

  function GermGame_Movement (gameTime) {
    var keys = $T0E().GetState().MemberwiseClone();
    if (this.currentScreen === $T01().Gameplay) {
      if (this.timeRunning) {
        this.time = $T00().op_Addition(this.time, gameTime.get_ElapsedGameTime()).MemberwiseClone();
      }
    }
    if (!(!keys.IsKeyDown($T0F().Right) || !keys.IsKeyUp($T0F().Space))) {
      this.spriteMovement.X = +this.spriteMovement.X + 3;
      this.facingRight = true;
      this.facingLeft = false;
      this.currentState = $T02().WalkingRight;
      if (this.currentState === $T02().WalkingRight) {
        this.spriteSelection = new ($T07())(50, 0, 50, 60);
        this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
        if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
          this.spriteSelection = new ($T07())(0, 0, 50, 60);
          this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(50, 0, 50, 60);
            this.timeWalkTwo = $T00().Zero.MemberwiseClone();
            this.timeWalk = $T00().Zero.MemberwiseClone();
          }
        }
      }
    }
    if (!(!keys.IsKeyDown($T0F().Left) || !keys.IsKeyUp($T0F().Space))) {
      this.spriteMovement.X = +this.spriteMovement.X + -3;
      this.facingLeft = true;
      this.facingRight = false;
      this.currentState = $T02().WalkingLeft;
      if (this.currentState === $T02().WalkingLeft) {
        this.spriteSelection = new ($T07())(0, 62, 50, 60);
        this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
        if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
          this.spriteSelection = new ($T07())(50, 62, 50, 60);
          this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(0, 62, 50, 60);
            this.timeWalkTwo = $T00().Zero.MemberwiseClone();
            this.timeWalk = $T00().Zero.MemberwiseClone();
          }
        }
      }
    }
    if (!(!keys.IsKeyDown($T0F().Right) || !keys.IsKeyDown($T0F().Space))) {
      this.spriteMovement.X = +this.spriteMovement.X + 3;
      if (this.canFire) {
        this.currentState = $T02().WalkingRightAndFiring;
        if (this.currentState === $T02().WalkingRightAndFiring) {
          this.spriteSelection = new ($T07())(100, 0, 50, 60);
          this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(150, 0, 50, 60);
            this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
            if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
              this.spriteSelection = new ($T07())(100, 0, 50, 60);
              this.timeWalkTwo = $T00().Zero.MemberwiseClone();
              this.timeWalk = $T00().Zero.MemberwiseClone();
            }
          }
        }
      } else {
        this.facingRight = true;
        this.facingLeft = false;
        this.currentState = $T02().WalkingRight;
        if (this.currentState === $T02().WalkingRight) {
          this.spriteSelection = new ($T07())(50, 0, 50, 60);
          this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(0, 0, 50, 60);
            this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
            if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
              this.spriteSelection = new ($T07())(50, 0, 50, 60);
              this.timeWalkTwo = $T00().Zero.MemberwiseClone();
              this.timeWalk = $T00().Zero.MemberwiseClone();
            }
          }
        }
      }
    }
    if (!(!keys.IsKeyDown($T0F().Left) || !keys.IsKeyDown($T0F().Space))) {
      this.spriteMovement.X = +this.spriteMovement.X + -3;
      if (this.canFire) {
        this.currentState = $T02().WalkingLeftAndFiring;
        if (this.currentState === $T02().WalkingLeftAndFiring) {
          this.spriteSelection = new ($T07())(100, 62, 50, 60);
          this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(150, 62, 50, 60);
            this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
            if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
              this.spriteSelection = new ($T07())(100, 62, 50, 60);
              this.timeWalkTwo = $T00().Zero.MemberwiseClone();
              this.timeWalk = $T00().Zero.MemberwiseClone();
            }
          }
        }
      } else {
        this.facingLeft = true;
        this.facingRight = false;
        this.currentState = $T02().WalkingLeft;
        if (this.currentState === $T02().WalkingLeft) {
          this.spriteSelection = new ($T07())(0, 62, 50, 60);
          this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(50, 62, 50, 60);
            this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
            if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
              this.spriteSelection = new ($T07())(0, 62, 50, 60);
              this.timeWalkTwo = $T00().Zero.MemberwiseClone();
              this.timeWalk = $T00().Zero.MemberwiseClone();
            }
          }
        }
      }
    }
    if (!(!keys.IsKeyUp($T0F().Right) || !this.facingRight)) {
      this.spriteSelection = new ($T07())(0, 0, 50, 60);
    }
    if (!(!keys.IsKeyUp($T0F().Left) || !this.facingLeft)) {
      this.spriteSelection = new ($T07())(0, 62, 50, 60);
    }
    if (!(!keys.IsKeyDown($T0F().Left) || !keys.IsKeyDown($T0F().Right))) {
      this.spriteSelection = new ($T07())(0, 0, 50, 60);
    }
    if (!(!keys.IsKeyDown($T0F().Left) || 
        !keys.IsKeyDown($T0F().Right) || !keys.IsKeyDown($T0F().Space))) {
      if (this.facingLeft) {
        this.spriteSelection = new ($T07())(0, 62, 50, 60);
      }
      if (this.facingRight) {
        this.spriteSelection = new ($T07())(0, 0, 50, 60);
      }
    }
    if (!(!keys.IsKeyDown($T0F().Space) || 
        !keys.IsKeyUp($T0F().Right) || 
        !this.facingRight || !this.canFire)) {
      this.currentState = $T02().Standing;
      if (this.currentState === $T02().Standing) {
        this.spriteSelection = new ($T07())(100, 0, 50, 60);
        this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
        if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
          this.spriteSelection = new ($T07())(0, 0, 50, 60);
          this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(100, 0, 50, 60);
            this.timeWalkTwo = $T00().Zero.MemberwiseClone();
            this.timeWalk = $T00().Zero.MemberwiseClone();
          }
        }
      }
    }
    if (!(!keys.IsKeyDown($T0F().Space) || 
        !keys.IsKeyUp($T0F().Left) || 
        !this.facingLeft || !this.canFire)) {
      this.currentState = $T02().Standing;
      if (this.currentState === $T02().Standing) {
        this.spriteSelection = new ($T07())(100, 62, 50, 60);
        this.timeWalk = $T00().op_Addition(this.timeWalk, gameTime.get_ElapsedGameTime()).MemberwiseClone();
        if ($T00().op_GreaterThan(this.timeWalk.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
          this.spriteSelection = new ($T07())(0, 62, 50, 60);
          this.timeWalkTwo = $T00().op_Addition(this.timeWalkTwo, gameTime.get_ElapsedGameTime()).MemberwiseClone();
          if ($T00().op_GreaterThan(this.timeWalkTwo.MemberwiseClone(), $T00().FromMilliseconds(200).MemberwiseClone())) {
            this.spriteSelection = new ($T07())(100, 62, 50, 60);
            this.timeWalkTwo = $T00().Zero.MemberwiseClone();
            this.timeWalk = $T00().Zero.MemberwiseClone();
          }
        }
      }
    }
    if (this.enemyStartPos[0]) {
      var expr_9EE_cp_0 = this.enemyPinkMovement;
      expr_9EE_cp_0[0].X = +expr_9EE_cp_0[0].X + 2;
      this.spriteFXPink[0] = $T12().FlipHorizontally;
      if (+this.enemyPinkMovement[0].X === 200) {
        this.enemyStartPos[0] = false;
      }
    } else {
      var expr_A42_cp_0 = this.enemyPinkMovement;
      expr_A42_cp_0[0].X = +expr_A42_cp_0[0].X - 2;
      this.spriteFXPink[0] = $T12().None;
      if (+this.enemyPinkMovement[0].X === 40) {
        this.enemyStartPos[0] = true;
      }
    }
    if (this.enemyStartPos[1]) {
      var expr_AA3_cp_0 = this.enemyPinkMovement;
      expr_AA3_cp_0[1].X = +expr_AA3_cp_0[1].X + 2;
      this.spriteFXPink[1] = $T12().FlipHorizontally;
      if (+this.enemyPinkMovement[1].X === 942) {
        this.enemyStartPos[1] = false;
      }
    } else {
      var expr_AF7_cp_0 = this.enemyPinkMovement;
      expr_AF7_cp_0[1].X = +expr_AF7_cp_0[1].X - 2;
      this.spriteFXPink[1] = $T12().None;
      if (+this.enemyPinkMovement[1].X === 636) {
        this.enemyStartPos[1] = true;
      }
    }
    if (this.enemyStartPos[2]) {
      var expr_B58_cp_0 = this.enemyPinkMovement;
      expr_B58_cp_0[2].X = +expr_B58_cp_0[2].X + 1;
      this.spriteFXPink[2] = $T12().FlipHorizontally;
      if (+this.enemyPinkMovement[2].X === 280) {
        this.enemyStartPos[2] = false;
      }
    } else {
      var expr_BAC_cp_0 = this.enemyPinkMovement;
      expr_BAC_cp_0[2].X = +expr_BAC_cp_0[2].X - 1;
      this.spriteFXPink[2] = $T12().None;
      if (+this.enemyPinkMovement[2].X === 205) {
        this.enemyStartPos[2] = true;
      }
    }
    if (this.enemyStartPos[3]) {
      var expr_C0D_cp_0 = this.enemyPinkMovement;
      expr_C0D_cp_0[3].X = +expr_C0D_cp_0[3].X + 2;
      this.spriteFXPink[3] = $T12().FlipHorizontally;
      if (+this.enemyPinkMovement[3].X === 684) {
        this.enemyStartPos[3] = false;
      }
    } else {
      var expr_C61_cp_0 = this.enemyPinkMovement;
      expr_C61_cp_0[3].X = +expr_C61_cp_0[3].X - 2;
      this.spriteFXPink[3] = $T12().None;
      if (+this.enemyPinkMovement[3].X === 352) {
        this.enemyStartPos[3] = true;
      }
    }
    if (this.enemyStartPos[4]) {
      var expr_CC2_cp_0 = this.enemyPurpleMovement;
      expr_CC2_cp_0[0].X = +expr_CC2_cp_0[0].X + 2;
      this.spriteFXPurple[0] = $T12().FlipHorizontally;
      if (+this.enemyPurpleMovement[0].X === 350) {
        this.enemyStartPos[4] = false;
      }
    } else {
      var expr_D16_cp_0 = this.enemyPurpleMovement;
      expr_D16_cp_0[0].X = +expr_D16_cp_0[0].X - 2;
      this.spriteFXPurple[0] = $T12().None;
      if (+this.enemyPurpleMovement[0].X === 224) {
        this.enemyStartPos[4] = true;
      }
    }
    if (this.enemyStartPos[5]) {
      var expr_D77_cp_0 = this.enemyPurpleMovement;
      expr_D77_cp_0[1].X = +expr_D77_cp_0[1].X + 2;
      this.spriteFXPurple[1] = $T12().FlipHorizontally;
      if (+this.enemyPurpleMovement[1].X === 280) {
        this.enemyStartPos[5] = false;
      }
    } else {
      var expr_DCB_cp_0 = this.enemyPurpleMovement;
      expr_DCB_cp_0[1].X = +expr_DCB_cp_0[1].X - 2;
      this.spriteFXPurple[1] = $T12().None;
      if (+this.enemyPurpleMovement[1].X === 118) {
        this.enemyStartPos[5] = true;
      }
    }
    if (this.enemyStartPos[6]) {
      var expr_E2C_cp_0 = this.enemyPurpleMovement;
      expr_E2C_cp_0[2].X = +expr_E2C_cp_0[2].X + 2;
      this.spriteFXPurple[2] = $T12().FlipHorizontally;
      if (+this.enemyPurpleMovement[2].X === 950) {
        this.enemyStartPos[6] = false;
      }
    } else {
      var expr_E80_cp_0 = this.enemyPurpleMovement;
      expr_E80_cp_0[2].X = +expr_E80_cp_0[2].X - 2;
      this.spriteFXPurple[2] = $T12().None;
      if (+this.enemyPurpleMovement[2].X === 780) {
        this.enemyStartPos[6] = true;
      }
    }
    if (this.enemyStartPos[7]) {
      var expr_EE1_cp_0 = this.enemyGreenMovement;
      expr_EE1_cp_0[0].X = +expr_EE1_cp_0[0].X + 2;
      this.spriteFXGreen[0] = $T12().FlipHorizontally;
      if (+this.enemyGreenMovement[0].X === 542) {
        this.enemyStartPos[7] = false;
      }
    } else {
      var expr_F35_cp_0 = this.enemyGreenMovement;
      expr_F35_cp_0[0].X = +expr_F35_cp_0[0].X - 2;
      this.spriteFXGreen[0] = $T12().None;
      if (+this.enemyGreenMovement[0].X === 446) {
        this.enemyStartPos[7] = true;
      }
    }
    if (this.enemyStartPos[8]) {
      var expr_F96_cp_0 = this.enemyGreenMovement;
      expr_F96_cp_0[1].X = +expr_F96_cp_0[1].X + 1;
      this.spriteFXGreen[1] = $T12().FlipHorizontally;
      if (+this.enemyGreenMovement[1].X === 58) {
        this.enemyStartPos[8] = false;
      }
    } else {
      var expr_FEA_cp_0 = this.enemyGreenMovement;
      expr_FEA_cp_0[1].X = +expr_FEA_cp_0[1].X - 1;
      this.spriteFXGreen[1] = $T12().None;
      if (+this.enemyGreenMovement[1].X === 24) {
        this.enemyStartPos[8] = true;
      }
    }
    if (this.enemyStartPos[9]) {
      var expr_104C_cp_0 = this.enemyGreenMovement;
      expr_104C_cp_0[2].X = +expr_104C_cp_0[2].X - 2;
      this.spriteFXGreen[2] = $T12().None;
      if (+this.enemyGreenMovement[2].X === 352) {
        this.enemyStartPos[9] = false;
      }
    } else {
      var expr_10A1_cp_0 = this.enemyGreenMovement;
      expr_10A1_cp_0[2].X = +expr_10A1_cp_0[2].X + 2;
      this.spriteFXGreen[2] = $T12().FlipHorizontally;
      if (+this.enemyGreenMovement[2].X === 684) {
        this.enemyStartPos[9] = true;
      }
    }
    if (!(!keys.IsKeyDown($T0F().R) || !this.hasFinished)) {
      this.spriteSelection = new ($T07())(0, 0, 50, 60);
      this.time = $T00().Zero.MemberwiseClone();
      this.restart = true;
      this.timeRunning = true;
      this.spriteMovement.X = 10;
      this.spriteMovement.Y = 460;
      this.hasDied = false;
      this.hasFinished = false;
      this.lives = 3;
      this.score = 0;

      for (var loop = 0; loop <= 3; loop = ((loop + 1) | 0)) {
        this.boolPink[loop] = true;
      }

      for (loop = 0; loop <= 2; loop = ((loop + 1) | 0)) {
        this.boolPurple[loop] = true;
        this.boolGreen[loop] = true;
      }
    }
    if (!(!keys.IsKeyDown($T0F().Up) || !this.allowJump)) {
      this.spriteMovement.Y = +this.spriteMovement.Y - +(this.jump);
      if ((this.jump | 0) > -12) {
        this.jump = (((this.jump | 0) - 1) | 0);
      }
    } else {
      this.spriteMovement.Y = +this.spriteMovement.Y + 5;
    }
    if (keys.IsKeyUp($T0F().Up)) {
      this.spriteMovement.Y = +this.spriteMovement.Y + 5;
      if ((this.jump | 0) < 12) {
        this.allowJump = false;
        this.jump = (((this.jump | 0) + 1) | 0);
      } else {
        this.allowJump = true;
      }
    }
    if (!(!keys.IsKeyDown($T0F().Space) || !this.canFire)) {
      this.timeFiring = $T00().op_Addition(this.timeFiring, gameTime.get_ElapsedGameTime()).MemberwiseClone();
      if ($T00().op_GreaterThan(this.timeFiring.MemberwiseClone(), $T00().FromMilliseconds(1000).MemberwiseClone())) {
        this.canFire = false;
      } else {
        this.canFire = true;
      }
    }
    if (!(!keys.IsKeyUp($T0F().Space) || this.canFire)) {
      this.canFire = true;
      this.timeFiring = $T00().Zero.MemberwiseClone();
    }
    if (!(!this.restart || !this.facingLeft)) {
      this.spriteSelection = new ($T07())(0, 0, 50, 60);
      this.facingRight = true;
      this.facingLeft = false;
      this.restart = false;
    }
  }; 

  function GermGame_Player (gameTime) {
    if (this.currentScreen === $T01().Gameplay) {
      if (this.hasJustStarted) {
        this.spriteMovement.X = 10;
        this.spriteMovement.Y = 480;
        this.hasJustStarted = false;
      }
      var middleOfRec = 0;
      var middleOfCol = 0;
      var recWidth = 0;
      var colWidth = 0;
      if (this.facingLeft) {
        middleOfRec = ((((this.spriteMovement.X) | 0) - 15) | 0);
        recWidth = 36;
        middleOfCol = ((((this.spriteMovement.X) | 0) + 21) | 0);
        colWidth = 29;
      }
      if (this.facingRight) {
        middleOfRec = ((((this.spriteMovement.X) | 0) + 29) | 0);
        recWidth = 36;
        middleOfCol = ((this.spriteMovement.X) | 0);
        colWidth = 29;
      }
      if (this.hasDied) {
        this.restart = true;
        this.spriteMovement.X = 10;
        this.spriteMovement.Y = 480;
        this.timeAfterDeath = $T00().op_Addition(this.timeAfterDeath, gameTime.get_ElapsedGameTime()).MemberwiseClone();
        if ($T00().op_GreaterThan(this.timeAfterDeath.MemberwiseClone(), $T00().FromMilliseconds(300).MemberwiseClone())) {
          this.hasDied = false;
          this.timeAfterDeath = $T00().Zero.MemberwiseClone();
        }
      }
      (this.spriteBatch).Draw(this.spriteSheet, this.spriteMovement, this.spriteSelection, $T09().get_White());
      this.spriteCollision = new ($T07())(middleOfCol, ((this.spriteMovement.Y) | 0), colWidth, 60);
      this.spriteRectangle = new ($T07())(middleOfRec, ((this.spriteMovement.Y) | 0), recWidth, 60);
    }
  }; 

  function GermGame_TimeScoreAndLives (gameTime) {
    if (this.currentScreen === $T01().Gameplay) {
      this.textIndicatorString[0] = (JSIL.ConcatString("LIVES: ", (this.lives).toString()));
      this.textIndicatorString[1] = (JSIL.ConcatString("SCORE: ", (this.score).toString()));
      if (((this.time).get_Seconds() | 0) < 10) {
        var timeText = $T0A().Format(
          "{0}:0{1}", 
          $T0B().$Box((this.time).get_Minutes()), 
          $T0B().$Box((this.time).get_Seconds())
        );
        var timeTextScore = $T0A().Format(
          "{0}.0{1}", 
          $T0B().$Box((this.time).get_Minutes()), 
          $T0B().$Box((this.time).get_Seconds())
        );
      } else {
        timeText = $T0A().Format(
          "{0}:{1}", 
          $T0B().$Box((this.time).get_Minutes()), 
          $T0B().$Box((this.time).get_Seconds())
        );
        timeTextScore = $T0A().Format(
          "{0}.{1}", 
          $T0B().$Box((this.time).get_Minutes()), 
          $T0B().$Box((this.time).get_Seconds())
        );
      }
      this.textIndicatorString[2] = (JSIL.ConcatString("TIME: ", timeText));

      for (var loop = 0; loop <= 2; loop = ((loop + 1) | 0)) {
        (this.spriteBatch).DrawString(this.textIndicator, this.textIndicatorString[loop], this.textIndicatorVec[loop], $T09().get_Black());
      }
      if ((this.lives | 0) === 0) {
        (this.spriteBatch).DrawRect(this.popup, this.popupRec, $T09().get_White());
        (this.spriteBatch).DrawString(this.popupTitle, "GAME OVER", $S00().Construct(382, 226), $T09().get_Black());
        (this.spriteBatch).DrawString(this.textIndicator, "THE GERMS WIN", $S00().Construct(415, 277), $T09().get_Black());
        (this.spriteBatch).DrawString(this.textIndicator, "Press Space to return to menu", $S00().Construct(340, 400), $T09().get_Black());
        (this.spriteBatch).Draw(this.enemyPinkOne, $S00().Construct(410, 310), $T09().get_White());
        (this.spriteBatch).Draw(this.enemyPurpleOne, $S00().Construct(485, 310), $T09().get_White());
        (this.spriteBatch).Draw(this.enemyGreenOne, $S00().Construct(575, 310), $T09().get_White());
        this.spriteMovement.Y = -80;
        this.timeRunning = false;
        if ($T0E().GetState().MemberwiseClone().IsKeyDown($T0F().Space)) {
          this.currentScreen = $T01().Start;
        }
      }
      if (this.hasFinished) {
        this.timeRunning = false;
        this.finalScore = +((+((this.score | 0) * (this.lives | 0)) / +$S01().CallStatic($T1B(), "ToDouble", null, timeTextScore)));
        (this.spriteBatch).DrawRect(this.popup, this.popupRec, $T09().get_White());
        this.popupString[0] = "LEVEL COMPLETE";
        this.popupString[1] = (JSIL.ConcatString("SCORE: ", (this.score).toString()));
        this.popupString[2] = (JSIL.ConcatString("LIVES: ", (this.lives).toString()));
        this.popupString[3] = (JSIL.ConcatString("TIME: ", timeText));
        this.popupString[4] = (JSIL.ConcatString("FINAL SCORE: ", $T13().__Type__.__PublicInterface__.$ToString(this.finalScore, "0", null)));
        this.popupString[5] = "PRESS R TO RESTART OR SPACE TO FINISH";

        for (loop = 0; loop < 1; loop = ((loop + 1) | 0)) {
          (this.spriteBatch).DrawString(this.popupTitle, this.popupString[loop], this.popupText[loop], $T09().get_Black());
        }

        for (loop = 1; loop < 5; loop = ((loop + 1) | 0)) {
          (this.spriteBatch).DrawString(this.textIndicator, this.popupString[loop], this.popupText[loop], $T09().get_Black());
        }

        for (loop = 5; loop < 6; loop = ((loop + 1) | 0)) {
          (this.spriteBatch).DrawString(this.smallFont, this.popupString[loop], this.popupText[loop], $T09().get_Black());
        }
        this.spriteMovement.Y = -80;
        if ($T0E().GetState().MemberwiseClone().IsKeyDown($T0F().Space)) {
          this.currentScreen = $T01().HighScores;
        }
      }
    }
  }; 

  function GermGame_UnloadContent () {
  }; 

  function GermGame_Update (gameTime) {
    this.Movement(gameTime);
    this.Level();
    this.Collision();
    $T03().prototype.Update.call(this, gameTime);
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "GermGame.GermGame", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GermGame__ctor
    );

    $.Method({Static:false, Public:false}, "Background", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GermGame_Background
    );

    $.Method({Static:false, Public:false}, "Collision", 
      JSIL.MethodSignature.Void, 
      GermGame_Collision
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GermGame_Draw
    );

    $.Method({Static:false, Public:false}, "Enemies", 
      JSIL.MethodSignature.Void, 
      GermGame_Enemies
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      GermGame_Initialize
    );

    $.Method({Static:false, Public:false}, "Level", 
      JSIL.MethodSignature.Void, 
      GermGame_Level
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      GermGame_LoadContent
    );

    $.Method({Static:false, Public:false}, "Menu", 
      JSIL.MethodSignature.Void, 
      GermGame_Menu
    );

    $.Method({Static:false, Public:false}, "Movement", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GermGame_Movement
    );

    $.Method({Static:false, Public:false}, "Player", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GermGame_Player
    );

    $.Method({Static:false, Public:false}, "TimeScoreAndLives", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GermGame_TimeScoreAndLives
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      GermGame_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GermGame_Update
    );

    $.Field({Static:false, Public:false}, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"));

    $.Field({Static:false, Public:false}, "spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"));

    $.Field({Static:false, Public:false}, "backgroundRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "background", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "menuBackground", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "instructionsBackground", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "highScoreBackground", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "screenWidth", $.Int32);

    $.Field({Static:false, Public:false}, "screenHeight", $.Int32);

    $.Field({Static:false, Public:false}, "spriteSheet", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "spriteMovement", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Field({Static:false, Public:false}, "textIndicator", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "textIndicatorVec", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "textIndicatorString", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "lives", $.Int32);

    $.Field({Static:false, Public:false}, "score", $.Int32);

    $.Field({Static:false, Public:false}, "finalScore", $.Double);

    $.Field({Static:false, Public:false}, "timeRunning", $.Boolean);

    $.Field({Static:false, Public:false}, "level", $.Int32);

    $.Field({Static:false, Public:false}, "screenStartTime", $asm06.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "scoreboard", $jsilcore.TypeRef("System.Array", [$.Double]));

    $.Field({Static:false, Public:false}, "scoreboardPosition", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "scoreboardRank", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "time", $asm06.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "timeAfterDeath", $asm06.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "enemyPinkOne", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "enemyPurpleOne", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "enemyGreenOne", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "enemyPinkMovement", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "enemyPinkRec", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:false}, "boolPink", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "spriteFXPink", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects")]));

    $.Field({Static:false, Public:false}, "enemyPurpleMovement", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "enemyPurpleRec", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:false}, "boolPurple", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "spriteFXPurple", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects")]));

    $.Field({Static:false, Public:false}, "enemyGreenMovement", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "enemyGreenRec", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:false}, "boolGreen", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "spriteFXGreen", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects")]));

    $.Field({Static:false, Public:false}, "enemyStartPos", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "hasDied", $.Boolean);

    $.Field({Static:false, Public:false}, "hasFinished", $.Boolean);

    $.Field({Static:false, Public:false}, "facingRight", $.Boolean);

    $.Field({Static:false, Public:false}, "facingLeft", $.Boolean);

    $.Field({Static:false, Public:false}, "restart", $.Boolean);

    $.Field({Static:false, Public:false}, "hasJustStarted", $.Boolean);

    $.Field({Static:false, Public:false}, "popup", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Field({Static:false, Public:false}, "popupRec", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "popupText", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "popupTitle", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "popupString", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "smallFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "instructionsFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "instructionsFontTitle", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "keyFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "spriteRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "spriteCollision", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "platforms", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:false}, "finishDoor", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "currentScreen", $asm00.TypeRef("GermGame.GermGame+ScreenState"));

    $.Field({Static:false, Public:false}, "menuTitle", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "menuButton", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Field({Static:false, Public:false}, "menuButtonText", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "menuButtonVectors", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Field({Static:false, Public:false}, "menuButtons", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]));

    $.Field({Static:false, Public:false}, "mouseRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "currentState", $asm00.TypeRef("GermGame.GermGame+State"));

    $.Field({Static:false, Public:false}, "spriteSelection", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "timeWalk", $asm06.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "timeWalkTwo", $asm06.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "allowJump", $.Boolean);

    $.Field({Static:false, Public:false}, "jump", $.Int32);

    $.Field({Static:false, Public:false}, "timeFiring", $asm06.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "canFire", $.Boolean);

    $.Field({Static:false, Public:false}, "exitDialog", $.Boolean);

    $.Field({Static:false, Public:false}, "yesRec", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Field({Static:false, Public:false}, "noRec", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum GermGame.GermGame+ScreenState */ 

JSIL.MakeEnum(
  {
    FullName: "GermGame.GermGame+ScreenState", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Start: 0, 
    Instructions: 1, 
    Gameplay: 2, 
    HighScores: 3, 
  }
);

/* enum GermGame.GermGame+State */ 

JSIL.MakeEnum(
  {
    FullName: "GermGame.GermGame+State", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Standing: 0, 
    WalkingRight: 1, 
    WalkingLeft: 2, 
    WalkingRightAndFiring: 3, 
    WalkingLeftAndFiring: 4, 
    FiringRight: 5, 
    FiringLeft: 6, 
    Jumping: 7, 
    Falling: 8, 
  }
);

